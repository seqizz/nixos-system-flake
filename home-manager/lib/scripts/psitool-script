#!/usr/bin/env python3

from hashlib import sha256
from pickle import dump, load
from socket import gethostname
from time import time


def current_psi_dict() -> dict:
    with open('/proc/pressure/cpu', 'r') as psifile:
        for line in psifile.readlines():
            if not line.startswith('some'):
                continue

            total = line.split(' ')[4].split('=')[1]
        return {'value': int(total), 'time': int(time())}


def write_current_value(temp_file, last_reported_value):
    current_value = current_psi_dict()
    current_value['last_reported_value'] = last_reported_value
    with open(temp_file, 'wb+') as valuefile:
        dump(current_value, valuefile)


def get_last_value(name):
    result = False
    try:
        with open(name, 'rb') as valuefile:
            result = load(valuefile)
    except IOError:
        return False
    return result


def get_filename():
    hash = sha256(gethostname().encode('utf-8')).hexdigest()[:8]
    return '/tmp/{}_psi'.format(hash)


def get_difference(temp_file):
    last_value = get_last_value(temp_file)
    if last_value is False:
        return "-1"
    current_value = current_psi_dict()
    time_difference = current_value['time'] - last_value['time']
    value_difference = current_value['value'] - last_value['value']
    if time_difference == 0:
        # Prevent division by zero, feed last one
        return last_value['last_reported_value']
    return int(value_difference / time_difference)


def main():
    temp_file = get_filename()

    last_reported_value = get_difference(temp_file)
    print(last_reported_value)
    write_current_value(temp_file, last_reported_value)


main()
